# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2021-09-14T16:46:02+00:00
# datamodel-codegen --input schema.json --input-file-type jsonschema --output model.py

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field


class Result(Enum):
    IC50 = 'IC50'
    Ki = 'Ki'
    Kd = 'Kd'


class Operator(Enum):
    _ = '='
    __1 = '>'
    __2 = '<'
    __ = '<='
    ___1 = '>='
    __3 = '~'
    __4 = '*'


class AssayResults(BaseModel):
    result_id: Optional[int] = Field(
        None, description='Unique identifier for an assay_result.'
    )
    target: Optional[str] = Field(
        None, description='The long name of the biological target used in the assay.'
    )
    result: Optional[Result] = Field(None, description='The result type of the assay.')
    operator: Optional[Operator] = Field(None, description='The value operator.')
    value: Optional[int] = Field(None, description='The result value.')
    unit: Optional[str] = Field(None, description='The result unit.')


class Compound(BaseModel):
    compound_id: int = Field(
        ..., description='Unique identifier for a compound, this is the primary key.'
    )
    smiles: str = Field(
        ...,
        description='String representation of the compound https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_system.',
    )
    molecular_weight: Optional[float] = Field(
        None, description='The weight of the compound, could be plotted on the X axis.'
    )
    ALogP: Optional[float] = Field(
        None,
        description='Indicates if the compound will dissolve in water or not, could be plotted on the Y axis.',
    )
    molecular_formula: Optional[str] = Field(
        None, description='A short string representation of the compound.'
    )
    num_rings: Optional[float] = Field(
        None,
        description='A count of the rings in the compound, could be used to color a plot. https://en.wikipedia.org/wiki/Ring_(chemistry)',
    )
    image: Optional[str] = Field(
        None,
        description='Compounds are visualised as 2D graphs, path to a pre-calculated png image of the compound.',
    )
    assay_results: Optional[Union[List, AssayResults]] = Field(
        None,
        description='The assay results for the compound (could be shown as Kd = 19uM) https://en.wikipedia.org/wiki/Assay.',
    )


class Model(BaseModel):
    __root__: Union[List, Model1] = Field(
        ...,
        description='A small data set of compounds and assay results extracted from ChEMBL',
    )
